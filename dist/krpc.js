"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var net = require("net");
var dgram = require("dgram");
var bencode = require("./bencode");
var events_1 = require("events");
var KBucket = require("k-bucket");
var crypto_1 = require("crypto");
var Protocol = require("bittorrent-protocol");
var ut_metadata = require("ut_metadata");
var KRPC = (function (_super) {
    __extends(KRPC, _super);
    function KRPC() {
        var _this = _super.call(this) || this;
        _this.concurrency = 100;
        _this._running = new Map();
        _this._pending = new Array();
        _this._tick = 0;
        _this._socket = dgram.createSocket('udp4');
        _this._socket.on('message', function (data, rinfo) {
            var message = bencode.decode(data), type = message.y.toString();
            if (type == 'r' || type == 'e') {
                try {
                    var tid = message.t.readUInt16BE(0), query = _this._running.get(tid);
                    if (query)
                        query.response(message[type], rinfo);
                }
                catch (error) {
                }
            }
            else if (type == 'q') {
                try {
                    var tid = message.t.readUInt16BE(0), query = {
                        method: message.q.toString(),
                        data: message.a,
                        peer: { host: rinfo.address, port: rinfo.port },
                        response: _this._response(message, rinfo)
                    };
                    _this.emit('query', query);
                }
                catch (error) {
                }
            }
        });
        return _this;
    }
    KRPC.prototype._response = function (message, rinfo) {
        var _this = this;
        var _message = message;
        return function (data) {
            Promise.resolve(data).then(function (data) {
                var message = {
                    t: _message.t,
                    y: 'r',
                    r: data
                };
                _this._socket.send(bencode.encode(message), rinfo.port, rinfo.address);
            });
        };
    };
    KRPC.prototype._runQueries = function () {
        var _this = this;
        var _loop_1 = function () {
            var query = this_1._pending.shift();
            var message = query.message, peer = query.peer, response = query.response;
            var tid = this_1._tick++;
            if (tid >= 0xFFFF)
                this_1._tick = 0;
            message.t.writeUInt16BE(tid, 0);
            query.response = function (data, rinfo) {
                clearTimeout(query.timer);
                _this._running.delete(tid);
                response(data, rinfo);
                _this._runQueries();
            };
            query.timer = setTimeout(function () {
                query.response(null, null);
            }, 1000);
            this_1._running.set(tid, query);
            this_1._socket.send(bencode.encode(message), peer.port, peer.host);
        };
        var this_1 = this;
        while (this._pending.length && this._running.size < this.concurrency) {
            _loop_1();
        }
    };
    KRPC.prototype.query = function (peer, method, data) {
        var _this = this;
        var message = {
            t: new Buffer(2),
            y: 'q',
            q: method,
        };
        if (data)
            message.a = data;
        return new Promise(function (resolve, reject) {
            var response = function (data, rinfo) {
                if (data) {
                    if (data.nodes)
                        data.nodes = parseNodes(data.nodes);
                    if (data.values && method == 'get_peers')
                        data.values = decodePeers(data.values);
                }
                resolve(data);
            };
            _this._pending.push({ message: message, peer: peer, response: response });
            _this._runQueries();
        });
    };
    return KRPC;
}(events_1.EventEmitter));
exports.KRPC = KRPC;
var DHT = (function (_super) {
    __extends(DHT, _super);
    function DHT() {
        var _this = _super.call(this) || this;
        _this.id = crypto_1.randomBytes(20);
        _this.K = 20;
        _this._krpc = new KRPC();
        _this._tables = [];
        _this._krpc.on('query', function (query) {
            var peer = query.peer, method = query.method, data = query.data, response = query.response;
            var id = _this._closestID(data);
            switch (method) {
                case 'ping':
                    response({ id: id });
                    break;
                case 'find_node':
                    response({ id: id, nodes: '' });
                    break;
                case 'get_peers':
                    response({ id: id, nodes: '', token: 'TAOBKCEN' });
                    break;
                case 'announce_peer':
                    response({ id: id });
                    console.log(data);
                    break;
                default:
                    break;
            }
        });
        return _this;
    }
    DHT.prototype._closestID = function (node) {
        if (node.id) {
            var id = new Buffer(node.id);
            for (var i = id.length; i >= 0; --i) {
                if (id[i] != this.id[i]) {
                    id[i] = this.id[i];
                    break;
                }
            }
            return id;
        }
        return this.id;
    };
    DHT.prototype.lookup = function (target, table) {
        var _this = this;
        if (table === void 0) { table = new KBucket({ localNodeId: target }); }
        console.log('DHT.lookup');
        table.removeAllListeners('ping');
        table.on('ping', function (oldNodes, newNode) {
            oldNodes.forEach(function (node) { return table.remove(node.id); });
            table.add(newNode);
        });
        var closest = function () {
            return table.count() > DHT.BOOTSTRAP_NODES.length
                ? table.closest(target, _this.K)
                : DHT.BOOTSTRAP_NODES;
        };
        var queries = function () {
            return Promise.all(closest().map(function (peer) {
                return _this._krpc.query(peer, 'get_peers', { id: _this._closestID(peer), info_hash: target });
            }));
        };
        return new Promise(function (resolve) {
            var next = function () {
                queries().then(function (results) {
                    var peers = [];
                    results.filter(function (result) { return result; }).forEach(function (result) {
                        var nodes = result.nodes, values = result.values;
                        if (nodes)
                            nodes.forEach(function (node) { return table.add(node); });
                        if (values)
                            peers = peers.concat(values);
                    });
                    if (peers.length == 0) {
                        next();
                    }
                    else {
                        resolve(peers);
                    }
                });
            };
            next();
        });
    };
    DHT.prototype.metadata = function (target, peers) {
        var _this = this;
        if (peers === void 0) { peers = null; }
        console.log('DHT.metadata');
        var table = new KBucket({ localNodeId: target });
        var retries = 8;
        var fetch = function (peers) {
            var promises = peers.map(function (peer) {
                return new Promise(function (resolve) {
                    var socket = net.connect(peer.port, peer.host, function () {
                        var wire = new Protocol();
                        socket.pipe(wire).pipe(socket);
                        wire.use(ut_metadata());
                        wire.handshake(target, _this.id);
                        wire.ut_metadata.on('metadata', function (metadata) {
                            resolve(metadata);
                        });
                        wire.on('handshake', function () {
                            wire.ut_metadata.fetch();
                        });
                    });
                    setTimeout(function () {
                        socket.destroy();
                        resolve(null);
                    }, 5000);
                    socket.on('error', function (err) {
                        resolve(null);
                    });
                });
            });
            return Promise.all(promises).then(function (results) {
                return results.find(function (value) { return value != null; }) || null;
            });
        };
        return new Promise(function (resolve) {
            var next = function () {
                if (--retries < 0) {
                    resolve(null);
                }
                else {
                    Promise.resolve(peers || _this.lookup(target, table)).then(function (_peers) {
                        console.log(_peers.length);
                        peers = null;
                        fetch(_peers).then(function (metadata) {
                            if (metadata)
                                resolve(metadata);
                            else
                                next();
                        });
                    });
                }
            };
            next();
        });
    };
    DHT.prototype.crawle = function (concurrency) {
        var _this = this;
        if (concurrency === void 0) { concurrency = 200; }
        var running = 0, cache = [];
        var query = function (node) {
            if (node && cache.length < concurrency)
                cache.push(node);
            if (running < concurrency) {
                ++running;
                var node_1 = cache.shift(), id = _this._closestID(node_1);
                _this._krpc.query(node_1, 'find_node', { id: id, target: crypto_1.randomBytes(20) }).then(next);
            }
        };
        var next = function (data) {
            --running;
            if (data && data.nodes && data.nodes.length) {
                data.nodes.forEach(query);
            }
            else {
                query(null);
            }
        };
        DHT.BOOTSTRAP_NODES.forEach(query);
    };
    DHT.prototype.createRouter = function (target) {
        var _this = this;
        var table = new KBucket({ localNodeId: target }), method = 'find_node', args = { id: target, target: target };
        this._tables.push(table);
        var queries = function (peers) {
            return Promise.all(peers.map(function (peer) {
                return _this._krpc.query(peer, method, args);
            }));
        };
        return new Promise(function (resolve) {
            var next = function (results) {
                var count = table.count();
                results.filter(function (result) { return result; }).forEach(function (result) {
                    var nodes = result.nodes;
                    if (nodes)
                        nodes.forEach(function (node) { return table.add(node); });
                });
                if (count == 0 || table.count() - count > 0) {
                    queries(table.closest(target, 20)).then(next);
                }
                else {
                    resolve(table);
                }
            };
            queries(DHT.BOOTSTRAP_NODES).then(next);
        });
    };
    return DHT;
}(events_1.EventEmitter));
DHT.BOOTSTRAP_NODES = [
    { host: 'router.bittorrent.com', port: 6881 },
    { host: 'router.utorrent.com', port: 6881 },
    { host: 'dht.transmissionbt.com', port: 6881 }
];
exports.DHT = DHT;
function decodePeers(buf) {
    var peers = [];
    try {
        for (var i = 0; i < buf.length; i++) {
            var port = buf[i].readUInt16BE(4);
            if (!port)
                continue;
            peers.push({
                host: parseIp(buf[i], 0),
                port: port
            });
        }
    }
    catch (err) {
    }
    return peers;
}
function parseNodes(buf) {
    var contacts = [];
    try {
        for (var i = 0; i < buf.length; i += 26) {
            var port = buf.readUInt16BE(i + 24);
            if (!port)
                continue;
            contacts.push({
                id: buf.slice(i, i + 20),
                host: parseIp(buf, i + 20),
                port: port
            });
        }
    }
    catch (err) {
    }
    return contacts;
}
function parseIp(buf, offset) {
    return buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++];
}

//# sourceMappingURL=data:application/json;base64,
