"use strict";
/**
 * Encodes data in bencode.
 *
 * @param  {Buffer|Array|String|Object|Number|Boolean} data
 * @return {Buffer}
 */
function encode(data) {
    var buffers = [];
    var result = null;
    _encode(buffers, data);
    result = Buffer.concat(buffers);
    _bytes = result.length;
    return result;
}
var _bytes = -1;
var _floatConversionDetected = false;
function _encode(buffers, data) {
    if (Buffer.isBuffer(data)) {
        buffers.push(new Buffer(data.length + ':'));
        buffers.push(data);
        return;
    }
    if (data == null) {
        return;
    }
    switch (typeof data) {
        case 'string':
            _buffer(buffers, data);
            break;
        case 'number':
            _number(buffers, data);
            break;
        case 'object':
            data.constructor === Array
                ? _list(buffers, data)
                : _dict(buffers, data);
            break;
        case 'boolean':
            _number(buffers, data ? 1 : 0);
            break;
    }
}
var buffE = new Buffer('e');
var buffD = new Buffer('d');
var buffL = new Buffer('l');
function _buffer(buffers, data) {
    buffers.push(new Buffer(Buffer.byteLength(data) + ':' + data));
}
function _number(buffers, data) {
    var maxLo = 0x80000000;
    var hi = (data / maxLo) << 0;
    var lo = (data % maxLo) << 0;
    var val = hi * maxLo + lo;
    buffers.push(new Buffer('i' + val + 'e'));
    if (val !== data && !_floatConversionDetected) {
        _floatConversionDetected = true;
        console.warn('WARNING: Possible data corruption detected with value "' + data + '":', 'Bencoding only defines support for integers, value was converted to "' + val + '"');
        console.trace();
    }
}
function _dict(buffers, data) {
    buffers.push(buffD);
    var j = 0;
    var k;
    // fix for issue #13 - sorted dicts
    var keys = Object.keys(data).sort();
    var kl = keys.length;
    for (; j < kl; j++) {
        k = keys[j];
        if (data[k] == null)
            continue;
        _buffer(buffers, k);
        _encode(buffers, data[k]);
    }
    buffers.push(buffE);
}
function _list(buffers, data) {
    var i = 0;
    var c = data.length;
    buffers.push(buffL);
    for (; i < c; i++) {
        if (data[i] == null)
            continue;
        _encode(buffers, data[i]);
    }
    buffers.push(buffE);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = encode;

//# sourceMappingURL=data:application/json;base64,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QUFDLEtBQUssQ0FBQyxDQUFBO0lBRW5CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7WUFBQyxRQUFRLENBQUE7UUFDN0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMzQixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyQixDQUFDOztBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJiZW5jb2RlL2VuY29kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW5jb2RlcyBkYXRhIGluIGJlbmNvZGUuXG4gKlxuICogQHBhcmFtICB7QnVmZmVyfEFycmF5fFN0cmluZ3xPYmplY3R8TnVtYmVyfEJvb2xlYW59IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gZW5jb2RlIChkYXRhKSA6IEJ1ZmZlciB7XG4gIHZhciBidWZmZXJzID0gW11cbiAgdmFyIHJlc3VsdCA9IG51bGxcblxuICBfZW5jb2RlKGJ1ZmZlcnMsIGRhdGEpXG4gIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycylcbiAgX2J5dGVzID0gcmVzdWx0Lmxlbmd0aFxuXG4gIHJldHVybiByZXN1bHRcbn1cblxubGV0IF9ieXRlcyA9IC0xXG5sZXQgX2Zsb2F0Q29udmVyc2lvbkRldGVjdGVkID0gZmFsc2VcblxuZnVuY3Rpb24gX2VuY29kZSAoYnVmZmVycywgZGF0YSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgYnVmZmVycy5wdXNoKG5ldyBCdWZmZXIoZGF0YS5sZW5ndGggKyAnOicpKVxuICAgIGJ1ZmZlcnMucHVzaChkYXRhKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKGRhdGEgPT0gbnVsbCkgeyByZXR1cm4gfVxuXG4gIHN3aXRjaCAodHlwZW9mIGRhdGEpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgX2J1ZmZlcihidWZmZXJzLCBkYXRhKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgX251bWJlcihidWZmZXJzLCBkYXRhKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgZGF0YS5jb25zdHJ1Y3RvciA9PT0gQXJyYXlcbiAgICAgICAgPyBfbGlzdChidWZmZXJzLCBkYXRhKVxuICAgICAgICA6IF9kaWN0KGJ1ZmZlcnMsIGRhdGEpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgX251bWJlcihidWZmZXJzLCBkYXRhID8gMSA6IDApXG4gICAgICBicmVha1xuICB9XG59XG5cbnZhciBidWZmRSA9IG5ldyBCdWZmZXIoJ2UnKVxudmFyIGJ1ZmZEID0gbmV3IEJ1ZmZlcignZCcpXG52YXIgYnVmZkwgPSBuZXcgQnVmZmVyKCdsJylcblxuZnVuY3Rpb24gX2J1ZmZlciAoYnVmZmVycywgZGF0YSkge1xuICBidWZmZXJzLnB1c2gobmV3IEJ1ZmZlcihCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSArICc6JyArIGRhdGEpKVxufVxuXG5mdW5jdGlvbiBfbnVtYmVyIChidWZmZXJzLCBkYXRhKSB7XG4gIHZhciBtYXhMbyA9IDB4ODAwMDAwMDBcbiAgdmFyIGhpID0gKGRhdGEgLyBtYXhMbykgPDwgMFxuICB2YXIgbG8gPSAoZGF0YSAlIG1heExvKSA8PCAwXG4gIHZhciB2YWwgPSBoaSAqIG1heExvICsgbG9cblxuICBidWZmZXJzLnB1c2gobmV3IEJ1ZmZlcignaScgKyB2YWwgKyAnZScpKVxuXG4gIGlmICh2YWwgIT09IGRhdGEgJiYgIV9mbG9hdENvbnZlcnNpb25EZXRlY3RlZCkge1xuICAgIF9mbG9hdENvbnZlcnNpb25EZXRlY3RlZCA9IHRydWVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnV0FSTklORzogUG9zc2libGUgZGF0YSBjb3JydXB0aW9uIGRldGVjdGVkIHdpdGggdmFsdWUgXCInICsgZGF0YSArICdcIjonLFxuICAgICAgJ0JlbmNvZGluZyBvbmx5IGRlZmluZXMgc3VwcG9ydCBmb3IgaW50ZWdlcnMsIHZhbHVlIHdhcyBjb252ZXJ0ZWQgdG8gXCInICsgdmFsICsgJ1wiJ1xuICAgIClcbiAgICBjb25zb2xlLnRyYWNlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGljdCAoYnVmZmVycywgZGF0YSkge1xuICBidWZmZXJzLnB1c2goYnVmZkQpXG5cbiAgdmFyIGogPSAwXG4gIHZhciBrXG4gIC8vIGZpeCBmb3IgaXNzdWUgIzEzIC0gc29ydGVkIGRpY3RzXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSkuc29ydCgpXG4gIHZhciBrbCA9IGtleXMubGVuZ3RoXG5cbiAgZm9yICg7IGogPCBrbDsgaisrKSB7XG4gICAgayA9IGtleXNbal1cbiAgICBpZiAoZGF0YVtrXSA9PSBudWxsKSBjb250aW51ZVxuICAgIF9idWZmZXIoYnVmZmVycywgaylcbiAgICBfZW5jb2RlKGJ1ZmZlcnMsIGRhdGFba10pXG4gIH1cblxuICBidWZmZXJzLnB1c2goYnVmZkUpXG59XG5cbmZ1bmN0aW9uIF9saXN0IChidWZmZXJzLCBkYXRhKSB7XG4gIHZhciBpID0gMFxuICB2YXIgYyA9IGRhdGEubGVuZ3RoXG4gIGJ1ZmZlcnMucHVzaChidWZmTClcblxuICBmb3IgKDsgaSA8IGM7IGkrKykge1xuICAgIGlmIChkYXRhW2ldID09IG51bGwpIGNvbnRpbnVlXG4gICAgX2VuY29kZShidWZmZXJzLCBkYXRhW2ldKVxuICB9XG5cbiAgYnVmZmVycy5wdXNoKGJ1ZmZFKVxufVxuXG5leHBvcnQgZGVmYXVsdCBlbmNvZGU7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
